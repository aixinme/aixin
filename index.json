[{"content":"aixin.me 心中有爱，遇见更好的自己\n","permalink":"https://aixin.me/about/","summary":"aixin.me 心中有爱，遇见更好的自己","title":"About"},{"content":"官网：https://eggjs.org/zh-cn/\n安装 // 1、创建并进入项目目录 mkdir egg-example \u0026amp;\u0026amp; cd egg-example // 2、初始化 npm init egg --type=simple // 3、安装项目 npm i // 4、启动项目 npm run dev // http://localhost:7001  type的类型\nsimple - 基础应用模板\nmicroservice - 基于egg的微服务模板\nsequelize - 带有sequelize的egg应用\nts - typescript的基础应用模板\nempty - 空模板\nplugin - egg 插件模板\nframework - 框架模板\n 核心功能 1、控制器 Controller // app/controller/home.js const Controller = require('egg').Controller; class HomeController extends Controller { async index() { this.ctx.body = 'Hello world'; } } module.exports = HomeController; 2、路由 Router // app/router.js module.exports = app =\u0026gt; { const { router, controller } = app; router.get('/', controller.home.index); }; 3、服务 service // app/service/news.js const Service = require('egg').Service; class NewsService extends Service { async list(page = 1) { // read config const { serverUrl, pageSize } = this.config.news; // use build-in http client to GET hacker-news api const { data: idList } = await this.ctx.curl(`${serverUrl}/topstories.json`, { data: { orderBy: '\u0026quot;$key\u0026quot;', startAt: `\u0026quot;${pageSize * (page - 1)}\u0026quot;`, endAt: `\u0026quot;${pageSize * page - 1}\u0026quot;`, }, dataType: 'json', }); // parallel GET detail const newsList = await Promise.all( Object.keys(idList).map(key =\u0026gt; { const url = `${serverUrl}/item/${idList[key]}.json`; return this.ctx.curl(url, { dataType: 'json' }); }) ); return newsList.map(res =\u0026gt; res.data); } } module.exports = NewsService; 4、模板渲染 view 需要单独安装视图插件，比如egg-view-nunjucks等\n5、配置文件 // config/config.default.js exports.keys = \u0026lt;此处改为你自己的 Cookie 安全字符串\u0026gt;; 6、静态资源 app/public ├── css │ └── news.css └── js ├── lib.js └── news.js 7、 编写扩展 // app/extend/helper.js const moment = require('moment'); exports.relativeTime = time =\u0026gt; moment(new Date(time * 1000)).fromNow(); 8、编写 Middleware // app/middleware/robot.js // options === app.config.robot module.exports = (options, app) =\u0026gt; { return async function robotMiddleware(ctx, next) { const source = ctx.get('user-agent') || ''; const match = options.ua.some(ua =\u0026gt; ua.test(source)); if (match) { ctx.status = 403; ctx.message = 'Go away, robot.'; } else { await next(); } } }; // config/config.default.js // add middleware robot exports.middleware = [ 'robot' ]; // robot's configurations exports.robot = { ua: [ /Baiduspider/i, ] }; 9、单元测试 // test/app/middleware/robot.test.js const { app, mock, assert } = require('egg-mock/bootstrap'); describe('test/app/middleware/robot.test.js', () =\u0026gt; { it('should block robot', () =\u0026gt; { return app.httpRequest() .get('/') .set('User-Agent', \u0026quot;Baiduspider\u0026quot;) .expect(403); }); }); ","permalink":"https://aixin.me/post/eggjs-basic-tutorial/","summary":"官网：https://eggjs.org/zh-cn/\n安装 // 1、创建并进入项目目录 mkdir egg-example \u0026amp;\u0026amp; cd egg-example // 2、初始化 npm init egg --type=simple // 3、安装项目 npm i // 4、启动项目 npm run dev // http://localhost:7001  type的类型\nsimple - 基础应用模板\nmicroservice - 基于egg的微服务模板\nsequelize - 带有sequelize的egg应用\nts - typescript的基础应用模板\nempty - 空模板\nplugin - egg 插件模板\nframework - 框架模板\n 核心功能 1、控制器 Controller // app/controller/home.js const Controller = require('egg').Controller; class HomeController extends Controller { async index() { this.ctx.body = 'Hello world'; } } module.","title":"Egg.js Basic Tutorial"},{"content":"在axure交互设计时，函数可以用在条件公式和需要赋值的地方，其基本语法是用双方括号包含，变量值和函数用英文句号连接。\n 例如：[[LVAR. Width]] 表示变量LVAR的宽度，[[This. Width]] 当前元件的宽度\n 一、元件函数    名称 用途     This 获取当前元件对象。当前元件是指当前添加交互动作的元件   Target 获取目标元件对象。目标元件是指当前交互动作控制的元件。   x 获取元件对象的X轴坐标值。   y 获取元件对象的Y轴坐标值。   width 获取元件对象的宽度值   scrollX 获取元件对象的水平滚动距离（当前仅限动态面板）   scrollY 获取元件对象的垂直滚动距离（当前仅限动态面板）   text 获取元件对象的文本文字   name 获取元件对象的自定义名称。   top 获取元件对象的上边界坐标值。   left 获取元件对象的左边界坐标值。   right 获取元件对象的右边界坐标值。   bottom 获取元件对象的下边界坐标值。   opacity 获取元件对象的不透明比例。   rotation 获取元件对象的旋转角度。    二、鼠标指针函数     名称 用途     Cursor.x 鼠标指针在页面中位置的X轴坐标。   Cursor.y 鼠标指针在页面中位置的Y轴坐标。   DragX 鼠标指针沿X轴拖动元件时的瞬间(0.01秒)拖动距离。   DragY 鼠标指针沿Y轴拖动元件时的瞬间(0.01秒)拖动距离。   TotalDragX 鼠标指针拖动元件从开始到结束的X轴移动距离。   TotalDragY 鼠标指针拖动元件从开始到结束的Y轴移动距离。   DragTime 鼠标指针拖动元件从开始到结束的总时长。    三、窗口函数     名称 用途     Window.width 打开原型页面的浏览器当前宽度。   Window.height 打开原型页面的浏览器当前高度。   Window.scrollX 浏览器中页面水平滚动的距离。   Window.scrollY 浏览器中页面垂直滚动的距离。    四、页面函数     名称 用途     PageName 获取当前页面的名称。    五、数字函数     名称 用途     toExponential(decimalPoints) 用途：值转换为指数计数法。参数：decimalPoints为保留小数的位数。   toFixed(decimalPoints) 用途：将一个数字转为保留指定位数的小数，小数位数超出指定位数时进行四舍五入。参数：decimalPoints为保留小数的位数。   toPrecision(length) 用途：把数字格式化为指定的长度。参数：length为格式化后的数字长度，小数点不计入长度。    六、数学函数     名称 用途     Math.abs(x) 计算参数数值的绝对值。 参数：x为数值。   Math.acos(x) 获取一个数值的反余弦弧度值，其范围是 0~ pi 。 参数：x为数值，范围在 -1~1 之间。   Math.asin(x) 获取一个数值的反正弦值。 参数：x为数值，范围在 -1~1 之间。   Math.atan(x) 获取一个数值的反正切值。 参数：x为数值。   Math.atan2(y,x) 获取某一点(x,y)的角度值。 参数：“x,y”为点的坐标数值。   Math.ceil(x) 向上取整函数，获取大于或者等于指定数值的最小整数。 参数：x为数值   Math.cos(x) 余弦函数。 参数：x为弧度数值。   Math.exp(x) 指数函数，计算以e为底的指数。 参数：x为数值。   Math.floor(x) 向下取整函数，获取小于或者等于指定数值的最大整数。 参数：x为数值。   Math.log(x) 对数函数，计算以e为底的对数值。 参数：x为数值。   Math.max(x,y) 获取参数中的最大值。 参数：“x,y”表示多个数值，而非2个数值。   Math.min(x,y) 获取参数中的最小值。 参数：“x,y”表示多个数值，而非2个数值。   Math.pow(x,y) 幂函数，计算x的y次幂。 参数：x不能为负数且y为小数，或者x为0且y小于等于0。   Math.random() 随机数函数，返回一个0~1之间的随机数。 示例：获取10-15之间的随机小数，计算公式为Math.random()*5+10。   Math.sin(x) 正弦函数。 参数：x为弧度数值。   Math.sqrt(x) 平方根函数。 参数：x为数值。   Math.tan(x) 正切函数。 参数：x为弧度数值。    七、时间函数     名称 用途     Now 获取当前计算机系统日期对象。   GenDate 获取原型生成日期对象。   getDate() 获取日期对象“日期”部分数值(1 ~ 31)。   getDay() 获取日期对象“星期”部分的数值(0 ~ 6)。   getDayOfWeek() 获取日期对象“星期”部分的英文名称。   getFullYear() 获取日期对象“年份”部分四位数值。   getHours() 获取日期对象“小时”部分数值(0 ~ 23)。   getMilliseconds() 获取日期对象的毫秒数(0 ~ 999)。   getMinutes() 获取日期对象“分钟”部分数值(0 ~59)。   getMonth() 获取日期对象“月份”部分的数值(1 ~ 12)。   getMonthName() 获取日期对象“月份”部分的英文名称。   getSeconds() 获取日期对象“秒数”部分数值(0 ~59)。   getTime() 获取当前日期对象中的时间值。该时间值表示从1970年1月1日00:00:00开始，到当前日期对象时，所经过的毫秒数，以格林威治时间为准。   getTimezoneOffset() 获取世界标准时间(UTC)与当前主机时间之间的分钟差值。   getUTCDate() 使用世界标准时间获取当前日期对象“日期”部分数值(1 ~ 31)。   getUTCDay() 使用世界标准时间获取当前日期对象“星期”部分的数值(0 ~ 6)。   getUTCFullYear() 使用世界标准时间获取当前日期对象“年份”部分四位数值。   getUTCHours() 使用世界标准时间获取当前日期对象“小时”部分数值(0 ~ 23)   getUTCMilliseconds() 使用世界标准时间获取当前日期对象的毫秒数(0 ~ 999)。   getUTCMinutes() 使用世界标准时间获取当前日期对象“分钟”部分数值(0 ~59)。   getUTCMonth() 使用世界标准时间获取当前日期对象“月份”部分的数值(1 ~ 12)。   getUTCSeconds() 使用世界标准时间获取当前日期对象“秒数”部分数值(0 ~59)。   Date.parse(datestring) 用于分析一个包含日期的字符串，并返回该日期与1970年1月1日00:00:00之间相差的毫秒数 参数：datestring为日期格式的字符串，格式为：yyyy/mm/dd hh:mm:ss。   toDateString() 以字符串的形式获取一个日期。   toISOString() 获取当前日期对象的IOS格式的日期字串，格式：YYYY-MM-DDTHH:mm:ss.sssZ。   toJSON() 获取当前日期对象的JSON格式的日期字串，格式： YYYY-MM-DDTHH:mm:ss.sssZ。   toLocaleDateString() 以字符串的形式获取本地化当前日期对象。并且只包含“年月日”部分的短日期信息。   toLocaleTimeString() 以字符串的形式获取本地化当前日期对象。并且只包含“时分秒”部分的短日期信息。   toUTCString() 以字符串的形式获取相对于当前日期对象的世界标准时间。   Date.UTC(year,month,day,hour,min,sec,millisec) 获取相对于1970 年 1 月 1 日 00:00:00的世界标准时间，与指定日期对象之间相差的毫秒数。 参数：组成指定日期对象的年、月、日、时、分、秒以及毫秒的数值。   valueOf() 获取当前日期对象的原始值。   addYears(years) 将指定的年份数加到当前日期对象上，获取一个新的日期对象。 参数：years为整数数值，正负均可。   addMonths(months) 将指定的月份数加到当前日期对象上，获取一个新的日期对象。 参数：months为整数数值，正负均可。   addDays(days) 将指定的天数加到当前日期对象上，获取一个新的日期对象。 参数：days为整数数值，正负均可。   addHours(hours) 将指定的小时数加到当前日期对象上，获取一个新的日期对象。 参数：hours为整数数值，正负均可。   addMinutes(minutes) 将指定的分钟数加到当前日期对象上，获取一个新的日期对象。 参数：minutes为整数数值，正负均可。   addSeconds(seconds) 将指定的秒数加到当前日期对象上，获取一个新的日期对象。 参数：seconds为整数数值，正负均可。   addMilliseconds(ms) 将指定的毫秒数加到当前日期对象上，获取一个新的日期对象。 参数：ms为整数数值，正负均可。   Year 获取系统日期对象“年份”部分的四位数值。   Month 获取系统日期对象“月份”部分数值(1 ~ 12)。   Day 获取系统日期对象“日期”部分数值(1 ~ 31)。   Hours 获取系统日期对象“小时”部分数值(0 ~ 23)。   Minutes 获取系统日期对象“分钟”部分数值(0 ~ 59)。   Seconds 获取系统日期对象“秒数”部分数值(0 ~ 59)。    八、字符串函数     名称 用途     length 获取当前文本对象的长度，即字符个数；1个汉字的长度按1计算。   charAt(index) 获取当前文本对象中指定位置的字符； 参数：index为大于等于0的整数。   charCodeAt(index) 获取当前文本对象中指定位置字符的Unicode编码（中文编码段19968 ~ 40622）；字符起始位置从0开始。 参数：index为大于等于0的整数。   concat(‘string’) 将当前文本对象与另一个字符串组合。 参数：string为组合在后方的字符串。   indexOf(‘searchValue’,start) 从左至右获取查询字符串在当前文本对象中首次出现的位置。未查询到时返回值为-1。 参数：searchValue为查询的字符串；start为查询的起始位置。该参数可省略，官方未给出此参数，经测试可用。   lastIndexOf(‘searchvalue’,start) 从右至左获取查询字符串在当前文本对象中首次出现的位置。未查询到时返回值为-1。 参数：searchValue为查询的字符串；start为查询的起始位置。该参数可省略，官方未给出此参数，经测试可用。   replace(‘searchvalue’,’newvalue’) 用新的字符串替换当前文本对象中指定的字符串。 参数：searchvalue为被替换的字符串；newvalue为新文本对象或字符串。   slice(start,end) 从当前文本对象中截取从指定起始位置开始到终止位置之前的字符串。 参数：start为被截取部分的起始位置，该数值可为负数；end为被截取部分的终止位置，该数值可为负数。该参数可省略，省略该参数则由起始位置截取至文本对象结尾。   split(‘separator’,limit) 将当前文本对象中与分隔字符相同的字符转为“,”，形成多组字符串，并返回从左开始的指定组数。 参数：separator为分隔字符，分隔字符可以为空，为空时将分隔每个字符为一组；limit为返回组数的数值，该参数可以省略，省略该参数则返回所有字符串组。   substr(start,length) 从当前文本对象中指定起始位置开始截取一定长度的字符串。 参数：start为被截取部分的起始位置；length为被截取部分的长度，该参数可省略，省略该参数则由起始位置截取至文本对象结尾。   substring(from,to) 从当前文本对象中截取从指定位置到另一指定位置区间的字符串。右侧位置不截取。 参数：from为指定区间的起始位置；to为指定区间的终止位置，该参数可省略，省略该参数则由起始位置截取至文本对象结尾。   toLowerCase() 将文本对象中所有的大写字母转换为小写字母。   toUpperCase() 将当前文本对象中所有的小写字母转换为大写字母。   trim() 去除当前文本对象两端的空格。   toString() 将一个逻辑值转换为字符串。    九、中继器函数     名称 用途     Repeater 中继器的对象。Item.Repeater即为Item所在的中继器对象。   visibleItemCount 中继器项目列表中可见项的数量。比如：项目列表共有15项，分页显示为每页6项。当项目列表在第1、2页时，可见项数量为6；当项目列表在第3页时，可见项数量为3。   itemCount 获取中继器项目列表的总数量，或者叫加载项数量。默认情况下项目列表的总数量会与中继器数据集中的数据行数量一致，但是，如果进行了筛选，项目列表的总数量则是筛选后的数量，这个数量不受分页影响。   dataCount 获取中继器数据集中数据行的总数量。   pageCount 获取中继器分页的总数量，即能够获取分页后共有多少页。   pageIndex 获取中继器项目列表当前显示内容的页码。   Item 获取数据集一行数据的集合，即数据行的对象。   TargetItem 目标数据行的对象。   Item.列名 获取数据行中指定列的值。   index 获取数据行的索引编号，编号起始为1，由上至下每行递增1。   isFirst 判断数据行是否为第1行；如果是第1行，返回值为“True”，否则为“False”。   isLast 判断数据行是否为最末行；如果是最末行，返回值为“True”，否则为“False”。   isEven 判断数据行是否为偶数行；如果是偶数行，返回值为“True”，否则为“False”。   isOdd 判断数据行是否为奇数行；如果是奇数行，返回值为“True”，否则为“False”。   isMarked 判断数据行是否为被标记；如果被标记，返回值为“True”，否则为“False”。   isVisible 判断数据行是否为可见行；如果是可见行，返回值为“True”，否则为“False”。    ","permalink":"https://aixin.me/post/axure-advanced-tutorial/","summary":"在axure交互设计时，函数可以用在条件公式和需要赋值的地方，其基本语法是用双方括号包含，变量值和函数用英文句号连接。\n 例如：[[LVAR. Width]] 表示变量LVAR的宽度，[[This. Width]] 当前元件的宽度\n 一、元件函数    名称 用途     This 获取当前元件对象。当前元件是指当前添加交互动作的元件   Target 获取目标元件对象。目标元件是指当前交互动作控制的元件。   x 获取元件对象的X轴坐标值。   y 获取元件对象的Y轴坐标值。   width 获取元件对象的宽度值   scrollX 获取元件对象的水平滚动距离（当前仅限动态面板）   scrollY 获取元件对象的垂直滚动距离（当前仅限动态面板）   text 获取元件对象的文本文字   name 获取元件对象的自定义名称。   top 获取元件对象的上边界坐标值。   left 获取元件对象的左边界坐标值。   right 获取元件对象的右边界坐标值。   bottom 获取元件对象的下边界坐标值。   opacity 获取元件对象的不透明比例。   rotation 获取元件对象的旋转角度。    二、鼠标指针函数     名称 用途     Cursor.","title":"Axure Advanced Tutorial"},{"content":"一、下载地址 https://code.visualstudio.com/\n二、插件推荐    插件名称 功能说明     Chinese (Simplified) Language Pack for Visual Studio Code 中文汉化包   Code Runner 运行代码   beautify 美化代码   Atuo Rename Tag 自动修改标签头尾   Atuo Close Tag 自动补全标签   Path Intellisense 路径提示器   Markdown PDF 将MD转化为PDF   Document This 生成注释文档   Color Picker 拾色器   Prettify JSON 格式化JSON       Vetur Vue代码工具   eggjs eggjs代码工具   Vscode NestJs Snippets NestJs代码工具       VSCode Great Icons 一套文件图标   Power Mode 打字效果   Bracket Pair Colorizer 给括号分别着色   Indent-Rainbow 多颜色交替缩进    三、主题推荐    主题名称 功能说明     Atom One Dark Theme Atom的样式   Dimmed 黑白灰    四、快捷键 1、通用 General\n   按 Press 功能 Function     Ctrl + Shift + P，F1 显示命令面板 Show Command Palette   Ctrl + P 快速打开 Quick Open   Ctrl + Shift + N 新窗口/实例 New window/instance   Ctrl + Shift + W 关闭窗口/实例 Close window/instance    2、基础编辑 Basic editing\n   按 Press 功能 Function     Ctrl+X 剪切行（空选定） Cut line (empty selection)   Ctrl+C 复制行（空选定）Copy line (empty selection)   Alt+ ↑ / ↓ 向上/向下移动行 Move line up/down   Shift+Alt + ↓ / ↑ 向上/向下复制行 Copy line up/down   Ctrl+Shift+K 删除行 Delete line   Ctrl+Enter 在下面插入行 Insert line below   Ctrl+Shift+Enter 在上面插入行 Insert line above   Ctrl+Shift+\\ 跳到匹配的括号 Jump to matching bracket   Ctrl+] / [ 缩进/缩进行 Indent/outdent line   Home 转到行首 Go to beginning of line   End 转到行尾 Go to end of line   Ctrl+Home 转到文件开头 Go to beginning of file   Ctrl+End 转到文件末尾 Go to end of file   Ctrl+↑ / ↓ 向上/向下滚动行 Scroll line up/down   Alt+PgUp / PgDown 向上/向下滚动页面 Scroll page up/down   Ctrl+Shift+[ 折叠（折叠）区域 Fold (collapse) region   Ctrl+Shift+] 展开（未折叠）区域 Unfold (uncollapse) region   Ctrl+K Ctrl+[ 折叠（未折叠）所有子区域 Fold (collapse) all subregions   Ctrl+K Ctrl+] 展开（未折叠）所有子区域 Unfold (uncollapse) all subregions   Ctrl+K Ctrl+0 折叠（折叠）所有区域 Fold (collapse) all regions   Ctrl+K Ctrl+J 展开（未折叠）所有区域 Unfold (uncollapse) all regions   Ctrl+K Ctrl+C 添加行注释 Add line comment   Ctrl+K Ctrl+U 删除行注释 Remove line comment   Ctrl+/ 切换行注释 Toggle line comment   Shift+Alt+A 切换块注释 Toggle block comment   Alt+Z 切换换行 Toggle word wrap    3、导航 Navigation\n   按 Press 功能 Function     Ctrl + T 显示所有符号 Show all Symbols   Ctrl + G 转到行\u0026hellip; Go to Line\u0026hellip;   Ctrl + P 转到文件\u0026hellip; Go to File\u0026hellip;   Ctrl + Shift + O 转到符号\u0026hellip; Go to Symbol\u0026hellip;   Ctrl + Shift + M 显示问题面板 Show Problems panel   F8 转到下一个错误或警告 Go to next error or warning   Shift + F8 转到上一个错误或警告 Go to previous error or warning   Ctrl + Shift + Tab 导航编辑器组历史记录 Navigate editor group history   Alt + ←/→ 返回/前进 Go back / forward   Ctrl + M 切换选项卡移动焦点 Toggle Tab moves focus    4、搜索和替换 Search and replace\n   按 Press 功能 Function     Ctrl + F 查找 Find   Ctrl + H 替换 Replace   F3 / Shift + F3 查找下一个/上一个 Find next/previous   Alt + Enter 选择查找匹配的所有出现 Select all occurences of Find match   Ctrl + D 将选择添加到下一个查找匹配 Add selection to next Find match   Ctrl + K Ctrl + D 将最后一个选择移至下一个查找匹配项 Move last selection to next Find match   Alt + C / R / W 切换区分大小写/正则表达式/整个词 Toggle case-sensitive / regex / whole word    5、多光标和选择 Multi-cursor and selection\n   按 Press 功能 Function     Alt +单击 插入光标 Insert cursor   Ctrl + Alt +↑/↓ 在上/下插入光标 Insert cursor above / below   Ctrl + U 撤消上一个光标操作 Undo last cursor operation   Shift + Alt + I 在选定的每一行的末尾插入光标 Insert cursor at end of each line selected   Ctrl + I 选择当前行 Select current line   Ctrl + Shift + L 选择当前选择的所有出现 Select all occurrences of current selection   Ctrl + F2 选择当前字的所有出现 Select all occurrences of current word   Shift + Alt + → 展开选择 Expand selection   Shift + Alt + ← 缩小选择 Shrink selection   Shift + Alt + （拖动鼠标） 列（框）选择 Column (box) selection   Ctrl + Shift + Alt +（箭头键） 列（框）选择 Column (box) selection   Ctrl + Shift + Alt + PgUp / PgDown 列（框）选择页上/下 Column (box) selection page up/down    6、丰富的语言编辑 Rich languages editing\n   按 Press 功能 Function     Ctrl + 空格 触发建议 Trigger suggestion   Ctrl + Shift + Space 触发器参数提示 Trigger parameter hints   Tab Emmet 展开缩写 Emmet expand abbreviation   Shift + Alt + F 格式化文档 Format document   Ctrl + K Ctrl + F 格式选定区域 Format selection   F12 转到定义 Go to Definition   Alt + F12 Peek定义 Peek Definition   Ctrl + K F12 打开定义到边 Open Definition to the side   Ctrl + . 快速解决 Quick Fix   Shift + F12 显示引用 Show References   F2 重命名符号 Rename Symbol   Ctrl + Shift + . /， 替换为下一个/上一个值 Replace with next/previous value   Ctrl + K Ctrl + X 修剪尾随空格 Trim trailing whitespace   Ctrl + K M 更改文件语言 Change file language    7、编辑器管理 Editor management\n   按 Press 功能 Function     Ctrl+F4, Ctrl+W 关闭编辑器 Close editor   Ctrl+K F 关闭文件夹 Close folder   Ctrl+\\ 拆分编辑器 Split editor   Ctrl+ 1 / 2 / 3 聚焦到第1，第2或第3编辑器组 Focus into 1st, 2nd or 3rd editor group   Ctrl+K Ctrl+ ←/→ 聚焦到上一个/下一个编辑器组 Focus into previous/next editor group   Ctrl+Shift+PgUp / PgDown 向左/向右移动编辑器 Move editor left/right   Ctrl+K ← / → 移动活动编辑器组 Move active editor group    8、文件管理 File management\n   按 Press 功能 Function     Ctrl+N 新文件 New File   Ctrl+O 打开文件\u0026hellip; Open File\u0026hellip;   Ctrl+S 保存 Save   Ctrl+Shift+S 另存为\u0026hellip; Save As\u0026hellip;   Ctrl+K S 全部保存 Save All   Ctrl+F4 关闭 Close   Ctrl+K Ctrl+W 关闭所有 Close All   Ctrl+Shift+T 重新打开关闭的编辑器 Reopen closed editor   Ctrl+K 输入保持打开 Enter Keep Open   Ctrl+Tab 打开下一个 Open next   Ctrl+Shift+Tab 打开上一个 Open previous   Ctrl+K P 复制活动文件的路径 Copy path of active file   Ctrl+K R 显示资源管理器中的活动文件 Reveal active file in Explorer   Ctrl+K O 显示新窗口/实例中的活动文件 Show active file in new window/instance    9、显示 Display\n   按 Press 功能 Function     F11 切换全屏 Toggle full screen   Shift+Alt+1 切换编辑器布局 Toggle editor layout   Ctrl+ = / - 放大/缩小 Zoom in/out   Ctrl+B 切换侧栏可见性 Toggle Sidebar visibility   Ctrl+Shift+E 显示浏览器/切换焦点 Show Explorer / Toggle focus   Ctrl+Shift+F 显示搜索 Show Search   Ctrl+Shift+G 显示Git Show Git   Ctrl+Shift+D 显示调试 Show Debug   Ctrl+Shift+X 显示扩展 Show Extensions   Ctrl+Shift+H 替换文件 Replace in files   Ctrl+Shift+J 切换搜索详细信息 Toggle Search details   Ctrl+Shift+C 打开新命令提示符/终端 Open new command prompt/terminal   Ctrl+Shift+U 显示输出面板 Show Output panel   Ctrl+Shift+V 切换Markdown预览 Toggle Markdown preview   Ctrl+K V 从旁边打开Markdown预览 Open Markdown preview to the side    10、调试 Debug\n   按 Press 功能 Function     F9 切换断点 Toggle breakpoint   F5 开始/继续 Start/Continue   Shift+F5 停止 Stop   F11 / Shift+F11 下一步/上一步 Step into/out   F10 跳过 Step over   Ctrl+K Ctrl+I 显示悬停 Show hover    11、集成终端 Integrated terminal\n   按 Press 功能 Function     Ctrl+` 显示集成终端 Show integrated terminal   Ctrl+Shift+` 创建新终端 Create new terminal   Ctrl+Shift+C 复制选定 Copy selection   Ctrl+Shift+V 粘贴到活动端子 Paste into active terminal   Ctrl+↑ / ↓ 向上/向下滚动 Scroll up/down   Shift+PgUp / PgDown 向上/向下滚动页面 Scroll page up/down   Ctrl+Home / End 滚动到顶部/底部 Scroll to top/bottom    ","permalink":"https://aixin.me/post/visual-studio-code-tutorial/","summary":"一、下载地址 https://code.visualstudio.com/\n二、插件推荐    插件名称 功能说明     Chinese (Simplified) Language Pack for Visual Studio Code 中文汉化包   Code Runner 运行代码   beautify 美化代码   Atuo Rename Tag 自动修改标签头尾   Atuo Close Tag 自动补全标签   Path Intellisense 路径提示器   Markdown PDF 将MD转化为PDF   Document This 生成注释文档   Color Picker 拾色器   Prettify JSON 格式化JSON       Vetur Vue代码工具   eggjs eggjs代码工具   Vscode NestJs Snippets NestJs代码工具       VSCode Great Icons 一套文件图标   Power Mode 打字效果   Bracket Pair Colorizer 给括号分别着色   Indent-Rainbow 多颜色交替缩进    三、主题推荐    主题名称 功能说明     Atom One Dark Theme Atom的样式   Dimmed 黑白灰    四、快捷键 1、通用 General","title":"Visual Studio Code Tutorial"},{"content":"2021年祝大家春节愉快，牛年大吉！ 艰难的一年过去了，未来或许更加艰难，也或许越来越好，但任何时候依然要不忘初心，努力奋斗。\n2021年目标  专注最重要的事情，做精做好 多些远谋，少些近虑 放下该放下的  ","permalink":"https://aixin.me/post/2021-spring-festivald/","summary":"2021年祝大家春节愉快，牛年大吉！ 艰难的一年过去了，未来或许更加艰难，也或许越来越好，但任何时候依然要不忘初心，努力奋斗。\n2021年目标  专注最重要的事情，做精做好 多些远谋，少些近虑 放下该放下的  ","title":"2021年祝大家春节愉快，牛年大吉！"},{"content":" 本文状态：未完成\n 一、产品原型  参考 Windows todo设计一个简单的移动端todo页面原型\n 二、开发教程 1、新建Todolist.vue  先通过脚手架配置好vue项目：@vue/cli\n 在项目src\\views下面新建Todo.vue\n\u0026lt;template\u0026gt;\r\u0026lt;div class=\u0026quot;todo\u0026quot;\u0026gt;\r\u0026lt;h1\u0026gt;Todolist\u0026lt;/h1\u0026gt;\r\u0026lt;input type=\u0026quot;text\u0026quot; v-model=\u0026quot;content\u0026quot; @keypress=\u0026quot;add\u0026quot;\u0026gt;\u0026lt;button @click=\u0026quot;add\u0026quot;\u0026gt;Add\u0026lt;/button\u0026gt;\r\u0026lt;p\u0026gt;{{content}}\u0026lt;/p\u0026gt;\r\u0026lt;div class=\u0026quot;section-title\u0026quot;\u0026gt;待办\u0026lt;/div\u0026gt;\r\u0026lt;ul class=\u0026quot;todolist underway\u0026quot;\u0026gt;\r\u0026lt;TodoItem :=\u0026quot;todo\u0026quot; v-for=\u0026quot;todo in underway\u0026quot; :key=\u0026quot;todo.id\u0026quot; :class=\u0026quot;{done:todo.status}\u0026quot; v-model=\u0026quot;todo.status\u0026quot; /\u0026gt;\r\u0026lt;/ul\u0026gt;\r\u0026lt;div class=\u0026quot;section-title\u0026quot;\u0026gt;已完成\u0026lt;/div\u0026gt;\r\u0026lt;ul class=\u0026quot;todolist completed\u0026quot;\u0026gt;\r\u0026lt;TodoItem :=\u0026quot;todo\u0026quot; v-for=\u0026quot;todo in completed\u0026quot; :key=\u0026quot;todo.id\u0026quot; :class=\u0026quot;{done:todo.status}\u0026quot; v-model=\u0026quot;todo.status\u0026quot; /\u0026gt;\r\u0026lt;/ul\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/template\u0026gt;\r\u0026lt;script\u0026gt;\rimport TodoItem from '../components/TodoItem';\rexport default {\rname: \u0026quot;Todo\u0026quot;,\rcomponents:{\rTodoItem\r},\rdata(){\rreturn{\rcontent:'hello world!',\rchecked:'',\rtodos:[\r{\rid:1,\rcontent:'这是内容1',\rstatus:false\r},\r{\rid:2,\rcontent:'这是内容2',\rstatus:true\r},\r{\rid:3,\rcontent:'这是内容3',\rstatus:true\r},\r{\rid:4,\rcontent:'这是内容4',\rstatus:false\r},\r{\rid:5,\rcontent:'这是内容5',\rstatus:true\r}\r],\r}\r},\rmethods:{\radd(){\rthis.todos.push({\rid:this.todos.length+1,\rcontent:this.content,\rstatus:false\r})\r}\r},\rcomputed:{\runderway(){\rreturn this.todos.filter(todos=\u0026gt;!todos.status);\r},\rcompleted(){\rreturn this.todos.filter(todos=\u0026gt;todos.status);\r}\r}\r}\r\u0026lt;/script\u0026gt;\r\u0026lt;style scoped\u0026gt;\r.section-title{font-weight: bold;font-size: 18px;}\r.todolist li{list-style: none;}\r.todolist li.done{text-decoration:line-through; }\r\u0026lt;/style\u0026gt;\r2、添加组件 \u0026lt;template\u0026gt;\r\u0026lt;li\u0026gt;\r\u0026lt;input type=\u0026quot;checkbox\u0026quot; :name=\u0026quot;id\u0026quot; :id=\u0026quot;id\u0026quot; :value=\u0026quot;content\u0026quot; :checked=\u0026quot;modelValue\u0026quot; @input=\u0026quot;onInput\u0026quot;/\u0026gt;\r\u0026lt;label :for=\u0026quot;id\u0026quot;\u0026gt;{{content}}\u0026lt;/label\u0026gt;\r\u0026lt;/li\u0026gt;\r\u0026lt;/template\u0026gt;\r\u0026lt;script\u0026gt;\rexport default {\rname: \u0026quot;TodoItem\u0026quot;,\rdata(){\rreturn{\r}\r},\rprops:{\rid:Number,\rcontent:String,\rmodelValue:Boolean\r},\rmethods:{\ronInput(e){\rthis.$emit('update:modelValue',e.target.checked);\r}\r}\r}\r\u0026lt;/script\u0026gt;\r\u0026lt;style scoped\u0026gt;\r\u0026lt;/style\u0026gt;\r2、添加路由 router\\index.js中添加\nconst routes = [\r//...\r{\rpath: '/todo',\rname: 'Todo',\rcomponent: ()=\u0026gt; import('../views/Todo')\r}\r3、入口文件增加Todo页面入口（可以不要这一步） App.vue 文件\n\u0026lt;router-link to=\u0026quot;/todo\u0026quot;\u0026gt;Todo\u0026lt;/router-link\u0026gt;\r// router-view 公用的不用多次添加\r\u0026lt;router-view/\u0026gt;\r4、预览页面 现在就可以npm run serve运行查看，\n打开首页后，点击Todo就可以打开todo页面，也可以直接在浏览器输入下面地址查看\n http://localhost:8080/todo\n 四、备注 父子组件相互传递数据\n==单条参数==\n\u0026lt;!-- 父组件 --\u0026gt;\r\u0026lt;template\u0026gt;\r\u0026lt;p\u0026gt;{{ name }}\u0026lt;/p\u0026gt;\r\u0026lt;TodoItem v-model=\u0026quot;name\u0026quot; /\u0026gt;\r\u0026lt;/template\u0026gt;\r\u0026lt;script\u0026gt;\rimport Son from '../components/Son';\rexport default {\rname: \u0026quot;Father\u0026quot;,\rcomponents:{\rSon\r},\rdata(){\rreturn{\rname:'Ketty'\r}\r}\r}\r\u0026lt;/script\u0026gt;\r\u0026lt;!-- 子组件 --\u0026gt;\r\u0026lt;template\u0026gt;\r\u0026lt;input type=\u0026quot;text\u0026quot; :value=\u0026quot;modelValue\u0026quot; @input=\u0026quot;onInput\u0026quot;/\u0026gt;\r\u0026lt;/template\u0026gt;\r\u0026lt;script\u0026gt;\rexport default {\rname: \u0026quot;Son\u0026quot;,\rprops:{\rmodelValue:String\r},\rmethods:{\ronInput(e){\rthis.$emit('update:modelValue',e.target.value);\r}\r}\r}\r\u0026lt;/script\u0026gt;\r\u0026lt;style scoped\u0026gt;\r\u0026lt;/style\u0026gt;\r==多条参数==\n\u0026lt;!-- 父组件 --\u0026gt;\r\u0026lt;template\u0026gt;\r\u0026lt;p\u0026gt;{{ name }}\u0026lt;/p\u0026gt;\r\u0026lt;p\u0026gt;{{ addr }}\u0026lt;/p\u0026gt;\r\u0026lt;TodoItem v-model:name=\u0026quot;name\u0026quot; v-model:addr=\u0026quot;addr\u0026quot;/\u0026gt;\r\u0026lt;/template\u0026gt;\r\u0026lt;script\u0026gt;\rimport Son from '../components/Son';\rexport default {\rname: \u0026quot;Father\u0026quot;,\rcomponents:{\rSon\r},\rdata(){\rreturn{\rname:'Ketty',\raddr:\u0026quot;\u0026quot;\r}\r}\r}\r\u0026lt;/script\u0026gt;\r\u0026lt;!-- 子组件 --\u0026gt;\r\u0026lt;template\u0026gt;\r\u0026lt;input type=\u0026quot;text\u0026quot; :value=\u0026quot;name\u0026quot; @input=\u0026quot;onNameInput\u0026quot;/\u0026gt;\r\u0026lt;input type=\u0026quot;text\u0026quot; :value=\u0026quot;addr\u0026quot; @input=\u0026quot;onAddrInput\u0026quot;/\u0026gt;\r\u0026lt;/template\u0026gt;\r\u0026lt;script\u0026gt;\rexport default {\rname: \u0026quot;Son\u0026quot;,\rprops:{\rname:String,\raddr:String\r},\rmethods:{\ronNameInput(e){\rthis.$emit('update:name',e.target.value);\r},\ronAddrInput(e){\rthis.$emit('update:addr',e.target.value);\r}\r}\r}\r\u0026lt;/script\u0026gt;\r","permalink":"https://aixin.me/post/vue-todo-tutorial/","summary":"本文状态：未完成\n 一、产品原型  参考 Windows todo设计一个简单的移动端todo页面原型\n 二、开发教程 1、新建Todolist.vue  先通过脚手架配置好vue项目：@vue/cli\n 在项目src\\views下面新建Todo.vue\n\u0026lt;template\u0026gt;\r\u0026lt;div class=\u0026quot;todo\u0026quot;\u0026gt;\r\u0026lt;h1\u0026gt;Todolist\u0026lt;/h1\u0026gt;\r\u0026lt;input type=\u0026quot;text\u0026quot; v-model=\u0026quot;content\u0026quot; @keypress=\u0026quot;add\u0026quot;\u0026gt;\u0026lt;button @click=\u0026quot;add\u0026quot;\u0026gt;Add\u0026lt;/button\u0026gt;\r\u0026lt;p\u0026gt;{{content}}\u0026lt;/p\u0026gt;\r\u0026lt;div class=\u0026quot;section-title\u0026quot;\u0026gt;待办\u0026lt;/div\u0026gt;\r\u0026lt;ul class=\u0026quot;todolist underway\u0026quot;\u0026gt;\r\u0026lt;TodoItem :=\u0026quot;todo\u0026quot; v-for=\u0026quot;todo in underway\u0026quot; :key=\u0026quot;todo.id\u0026quot; :class=\u0026quot;{done:todo.status}\u0026quot; v-model=\u0026quot;todo.status\u0026quot; /\u0026gt;\r\u0026lt;/ul\u0026gt;\r\u0026lt;div class=\u0026quot;section-title\u0026quot;\u0026gt;已完成\u0026lt;/div\u0026gt;\r\u0026lt;ul class=\u0026quot;todolist completed\u0026quot;\u0026gt;\r\u0026lt;TodoItem :=\u0026quot;todo\u0026quot; v-for=\u0026quot;todo in completed\u0026quot; :key=\u0026quot;todo.id\u0026quot; :class=\u0026quot;{done:todo.status}\u0026quot; v-model=\u0026quot;todo.status\u0026quot; /\u0026gt;\r\u0026lt;/ul\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;/template\u0026gt;\r\u0026lt;script\u0026gt;\rimport TodoItem from '../components/TodoItem';\rexport default {\rname: \u0026quot;Todo\u0026quot;,\rcomponents:{\rTodoItem\r},\rdata(){\rreturn{\rcontent:'hello world!","title":"Vue3 开发 Todolist 教程"},{"content":"安装VUE npm install webpack -g\rnpm install webpack-cli -g\rnpm install -g @vue/cli @vue/cli-service-global\rvue create hello-world\rnpm run serve\rnpm run build\r基本框架 \u0026lt;div id=\u0026quot;app\u0026quot;\u0026gt;\r\u0026lt;p\u0026gt;{{ message }}\u0026lt;/p\u0026gt;\r\u0026lt;p\u0026gt;{{ content() }}\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\rvar vm = new Vue({\rel: '#app',\rdata: {\rmessage: 'Hello'\r},\rmethods: {\rcontent: function(){\rreturn this.message + ' Vue.js';\r}\r}\r})\r说明： vue代码结构：\nnew Vue({\rel: '#app',//根元素\rdata: { //变量\rmessage: 'Hello'\r},\rmethods: { //函数方法\rcontent: function(){\rreturn this.message + ' Vue.js';//this可以获取当前vue中所有的变量或函数\r}\r},\rfilters:{ //过滤器\rfilterA: function(arg1,arg2){\rreturn arg1 + arg2;\r},\rfilterB: function(){\r//...\r}\r}\r})\r//可以将上面代码传给一个对象，比如\rvar vm = new Vue({...\r//这样就可以对象获取或操作里面的属性，比如\rvm.message = 'Message has been changed!';\r//可以用$获取对象中的data\rvm.$data\r//或者\rvm.$el\r// 双大括号显示内容\r\u0026lt;p\u0026gt;{{ message }}\u0026lt;/p\u0026gt; // 变量直接写变量名\r\u0026lt;p\u0026gt;{{ content() }}\u0026lt;/p\u0026gt; // 函数直接写函数名()，记得后面跟小括号\r模板语法 ==v-html 指令==\n\u0026lt;div v-html=\u0026quot;message\u0026quot;\u0026gt;\u0026lt;/div\u0026gt;\r// 通过v-html来输出html内容\r// {{ message}} 只支持文本\r==v-bind 指令==\n//绑定属性要用冒号:\r\u0026lt;div v-bind:id=\u0026quot;'list-' + id\u0026quot;\u0026gt;菜鸟教程\u0026lt;/div\u0026gt;\r// id从data中获取\r\u0026lt;a v-bind:href=\u0026quot;url\u0026quot;\u0026gt;菜鸟教程\u0026lt;/a\u0026gt;\r//可以绑定所有元素属性，比如src、href、class、id等等\r//v-bind的缩写形式，直接用冒号代替\r\u0026lt;a :href=\u0026quot;url\u0026quot;\u0026gt;\u0026lt;/a\u0026gt;\r==运行JavaScript表达式==\n{{5+5}}\u0026lt;br\u0026gt;\r{{ ok ? 'YES' : 'NO' }}\u0026lt;br\u0026gt;\r{{ message.split('').reverse().join('') }}\r==v-if 条件判断==\n\u0026lt;p v-if=\u0026quot;seen\u0026quot;\u0026gt;现在你看到我了\u0026lt;/p\u0026gt;\r//可以配合v-else使用\r\u0026lt;div v-else\u0026gt;\rNothing\r\u0026lt;/div\u0026gt;\r//也可以用v-else-if，同v-if\r// 相关方法 v-show\r\u0026lt;h1 v-show=\u0026quot;ok\u0026quot;\u0026gt;Hello!\u0026lt;/h1\u0026gt;\r==v-on 监听DOM事件==\n\u0026lt;a v-on:click=\u0026quot;doSomething\u0026quot;\u0026gt;\r//修饰符\r\u0026lt;form v-on:submit.prevent=\u0026quot;onSubmit\u0026quot;\u0026gt;\u0026lt;/form\u0026gt;\r//v-on的缩写形式，直接用@符号代替\r\u0026lt;a @click=\u0026quot;doSomething\u0026quot;\u0026gt;\u0026lt;/a\u0026gt;\r==v-model 双向数据绑定==\n\u0026lt;input v-model=\u0026quot;message\u0026quot;\u0026gt;\r// v-model 指令用来在 input、select、textarea、checkbox、radio 等表单控件元素上创建双向数据绑定，\r// 根据表单上的值，自动更新绑定的元素的值。\r==v-for条件循环==\n// 循环数组\r\u0026lt;li v-for=\u0026quot;site in sites\u0026quot;\u0026gt;\r{{ site.name }}\r\u0026lt;/li\u0026gt;\rdata: {\rsites: [\r{ name: 'Runoob' },\r{ name: 'Google' },\r{ name: 'Taobao' }\r]\r}\r// 循环对象\r\u0026lt;li v-for=\u0026quot;value in object\u0026quot;\u0026gt;\r{{ value }}\r\u0026lt;/li\u0026gt;\rdata: {\robject: {\rname: '菜鸟教程',\rurl: 'http://www.runoob.com',\rslogan: '学的不仅是技术，更是梦想！'\r}\r}\r// 值，键，索引\r\u0026lt;li v-for=\u0026quot;(value, key, index) in object\u0026quot;\u0026gt;\r{{ index }}. {{ key }} : {{ value }}\r\u0026lt;/li\u0026gt;\r// 循环整数\r\u0026lt;li v-for=\u0026quot;n in 10\u0026quot;\u0026gt;\r{{ n }}\r\u0026lt;/li\u0026gt;\r过滤器 {{ message | filterA}}\r{{ message | filterA | filterB }}\r{{ message | filterA('arg1', arg2) }}\r// 过滤器就是JavaScript的函数，同时也可以给过滤器传参arg1、arg2等\r","permalink":"https://aixin.me/post/vue3-base-tutorials/","summary":"安装VUE npm install webpack -g\rnpm install webpack-cli -g\rnpm install -g @vue/cli @vue/cli-service-global\rvue create hello-world\rnpm run serve\rnpm run build\r基本框架 \u0026lt;div id=\u0026quot;app\u0026quot;\u0026gt;\r\u0026lt;p\u0026gt;{{ message }}\u0026lt;/p\u0026gt;\r\u0026lt;p\u0026gt;{{ content() }}\u0026lt;/p\u0026gt;\r\u0026lt;/div\u0026gt;\rvar vm = new Vue({\rel: '#app',\rdata: {\rmessage: 'Hello'\r},\rmethods: {\rcontent: function(){\rreturn this.message + ' Vue.js';\r}\r}\r})\r说明： vue代码结构：\nnew Vue({\rel: '#app',//根元素\rdata: { //变量\rmessage: 'Hello'\r},\rmethods: { //函数方法\rcontent: function(){\rreturn this.","title":"Vue3 基础知识点"},{"content":"一、安装  下面时windows10的安装教程，Linux和MAC去看官方教程\n 1、下载 最新版下载地址：https://github.com/gohugoio/hugo/releases\n下载 Windows-64bit.zip\n2、新建本地目录  D:\\Hugo\nD:\\Hugo\\bin\nD:\\Hugo\\Sites\n盘符和目录都可以自定义，但bin和Sites要固定\n 将下载的安装包里面的hugo.exe解压到D:\\Hugo\\bin下面\n3、配置环境 我的电脑→右键→高级→环境变量→系统变量→Path，增加D:\\Hugo\\bin\n4、安装完成 验证\nhugo version //查看版本\rhugo help //帮助文档\r 能正常输出即安装成功\n 二、新建网站 在D:\\Hugo\\Sites下面打开cmd，或其他命令工具\nhugo new site simple.com\r 新建simple.com 网站名自定义\n  回车创建成功！\n然后在D:\\Hugo\\Sites下面就会新建一个simple文件夹\n 三、编写内容 1、目录说明  archetypes/ 创建页面的原型文件，比如标题时间等，可以自定义\ncontent/ markdown原文件存储目录\nlayouts/ 样式自定义时需要\nstatic/ 静态文件\nthemes/ 主题会安装在这儿\nconfig.toml 配置文件\n 2、创建页面 在网站目录下面执行命令\nhugo new about.md\r 自动在当前网站下的content目录下生成about.md文件\n 3、创建文章 hugo new post/hello-world.md\r自动在content/post下面生成hello-world.md文件\n新生成的文件自动会有三个字段(这儿的模板可以在archetypes里面的文件修改)：\ntitle: \u0026quot;Hello world\u0026quot; //文件名称\rdate: 2020-11-03T16:58:08+08:00 //创建日期\rdraft: true //草稿，默认开启\r4、安装主题 在官方主题库中找到喜欢主题，按照教程安装\nhttps://themes.gohugo.io/\n例如： https://themes.gohugo.io/hugo-papermod/\n 当前博客用的就是这个主题\n按照主题教程安装即可，建议使用主题推荐的config配置文件 papermod配置\n baseURL: \u0026quot;https://aixin.me\u0026quot;\rtitle: Aixin.me\rpaginate: 5\rtheme: hugo-PaperMod-5.0\rdefaultContentLanguage: zh\renableRobotsTXT: true\rbuildDrafts: false\rbuildFuture: false\rbuildExpired: false\r# googleAnalytics: UA-123-45\rminify:\rdisableXML: true\rminifyOutput: true\rparams:\renv: production # to enable google analytics, opengraph, twitter-cards and schema.\rtitle: Aixin.me\rdescription: \u0026quot;Aixin.me\u0026quot;\rauthor: Aixin\r# author: [\u0026quot;Me\u0026quot;, \u0026quot;You\u0026quot;] # multiple authors\rimages: [\u0026quot;\u0026lt;link or path of image for opengraph, twitter-cards\u0026gt;\u0026quot;]\rDateFormat: \u0026quot;\u0026quot;\rdefaultTheme: auto # dark, light\rdisableThemeToggle: false\rShowReadingTime: true\rShowShareButtons: false\rdisableSpecial1stPost: false\rcomments: false\rhidemeta: false\rshowtoc: false\rtocopen: false\rassets:\r# disableHLJS: true # to disable highlight.js\r# disableFingerprinting: true\rfavicon: \u0026quot;/images/favicon.ico\u0026quot;\rfavicon16x16: \u0026quot;\u0026lt;link / abs url\u0026gt;\u0026quot;\rfavicon32x32: \u0026quot;\u0026lt;link / abs url\u0026gt;\u0026quot;\rapple_touch_icon: \u0026quot;\u0026lt;link / abs url\u0026gt;\u0026quot;\rsafari_pinned_tab: \u0026quot;\u0026lt;link / abs url\u0026gt;\u0026quot;\rlabel:\rtext: \u0026quot;Aixin.me\u0026quot;\ricon: iconHeight: 35\r# profile-mode\rprofileMode:\renabled: false # needs to be explicitly set\rtitle: ExampleSite\rsubtitle: \u0026quot;This is subtitle\u0026quot;\rimageUrl: \u0026quot;\u0026lt;img location\u0026gt;\u0026quot;\rimageWidth: 120\rimageHeight: 120\rimageTitle: my image\rbuttons:\r- name: Posts\rurl: posts\r- name: Tags\rurl: tags\r# home-info mode\rhomeInfoParams:\rTitle: \u0026quot;Hi there \\U0001F44B\u0026quot;\rContent: Welcome to my blog\rcover:\rhidden: true # hide everywhere but not in structured data\rhiddenInList: true # hide on list pages and home\rhiddenInSingle: true # hide on single page\r# for search\rfuseOpts:\risCaseSensitive: false\rshouldSort: true\rlocation: 0\rdistance: 1000\rthreshold: 0.4\rminMatchCharLength: 0\rkeys: [\u0026quot;title\u0026quot;, \u0026quot;permalink\u0026quot;, \u0026quot;summary\u0026quot;, \u0026quot;content\u0026quot;]\rmenu:\rmain:\r- identifier: about\rname: About\rurl: /about/\rweight: 10\r- identifier: archives\rname: Archives\rurl: /archives/\rweight: 10\r- identifier: tags\rname: Tags\rurl: /tags/\rweight: 20\r- identifier: search\rname: Search\rurl: /search/\rweight: 30\r# for search\routputs:\rhome:\r- HTML\r- RSS\r- JSON # is necessary\r5、本地运行 网站根目录执行：\nhugo server\r 最后，必须将文章的draft: true改成draft: false才可以在网站上显示出来\n当然，也可以使用hugo server --theme=hyde --buildDrafts，可以指定主题，也可以编译draft: true的文件\n 四、发布网站 网站根目录执行：\nhugo --baseUrl=https:simple.com\r然后就会将博客发布到public目录下面\n将pubic目录下的文件发布到git上即可\n https:simple.com 是目标网址，也可以是simple.github.io\n\u0026ndash;baseUrl是将config文件里面的baseUrl修改为生产环境的地址\n 以上全部完毕，只写了基本的用法，更详细的教程请查看官方教程，也可以使用hugo help命令查看帮助文档\n常用命令 //本地预览：http://localhost:1313/\rD:\\Hugo\\Sites\\simple.com\u0026gt; hugo server\r//生成静态文件\rD:\\Hugo\\Sites\\simple.com\u0026gt; hugo\r//push到github\rD:\\Hugo\\Sites\\simple.com\\public\u0026gt; git push origin master\r","permalink":"https://aixin.me/post/how-to-hugo/","summary":"一、安装  下面时windows10的安装教程，Linux和MAC去看官方教程\n 1、下载 最新版下载地址：https://github.com/gohugoio/hugo/releases\n下载 Windows-64bit.zip\n2、新建本地目录  D:\\Hugo\nD:\\Hugo\\bin\nD:\\Hugo\\Sites\n盘符和目录都可以自定义，但bin和Sites要固定\n 将下载的安装包里面的hugo.exe解压到D:\\Hugo\\bin下面\n3、配置环境 我的电脑→右键→高级→环境变量→系统变量→Path，增加D:\\Hugo\\bin\n4、安装完成 验证\nhugo version //查看版本\rhugo help //帮助文档\r 能正常输出即安装成功\n 二、新建网站 在D:\\Hugo\\Sites下面打开cmd，或其他命令工具\nhugo new site simple.com\r 新建simple.com 网站名自定义\n  回车创建成功！\n然后在D:\\Hugo\\Sites下面就会新建一个simple文件夹\n 三、编写内容 1、目录说明  archetypes/ 创建页面的原型文件，比如标题时间等，可以自定义\ncontent/ markdown原文件存储目录\nlayouts/ 样式自定义时需要\nstatic/ 静态文件\nthemes/ 主题会安装在这儿\nconfig.toml 配置文件\n 2、创建页面 在网站目录下面执行命令\nhugo new about.md\r 自动在当前网站下的content目录下生成about.md文件\n 3、创建文章 hugo new post/hello-world.","title":"静态博客Hugo安装及使用教程"},{"content":"借贷记账法 借贷记账法下，所有账户的结构都是左方为借方，右方为贷方，但借方、贷方反映会计要素数量变化的增减性质则是不固定的。不同性质的账户，借贷方所登记的内容不同，下面分别说明各类账户的结构。\n有借必有贷，借贷必相等\n  资产类账户的结构 在资产类账户中，它的借方记录资产的增加额，贷方记录资产的减少额。在同一会计期间（年、月），借方记录的合计数额称作本期借方发生额，贷方记录的合计数称作本期贷方发生额，在每一会计期间的期末将借贷方发生额相比较，其差额称作期末余额。资产类账户的期末余额一般在借方。\n资产类账户的期末余额可根据下列公式计算： 期末余额（借方）= 期初余额 + 本期借方发生额 - 本期贷方发生额\n  负债类账户和所有者权益类账户的结构 负债及所有者权益类账户的结构与资产类账户正好相反，其贷方记录负债及所有者权益的增加额；借方记录负债及所有者权益的减少额，期末余额一般应在贷方。\n负债类账户和所有者权益类账户的期末余额可根据下列公式计算： 期末余额（贷方）= 期初余额 + 本期贷方发生额 - 本期借方发生额\n  成本费用类账户的结构 成本类账户的结构与资产类账户的结构基本相同，账户的借方记录费用成本的增加额，账户的贷方记录费用成本转入抵销收益类账户（减少）的数额，由于借方记录的费用成本的增加额一般都要通过贷方转出，所以账户通常没有余额。如果有余额，也表现为借方余额。\n  收益类账户的结构 收益类账户的结构则与负债类账户和所有者权益类账户的结构基本相同，收入的增加额记入账户的贷方，收入转出（减少额）则应记入账户的借方，由于贷方记录的收入增加额一般要通过借方转出，所以账户通常也没有期末余额。如果有余额，同样也表现为贷方余额。\n  ","permalink":"https://aixin.me/post/finance-accounting/","summary":"借贷记账法 借贷记账法下，所有账户的结构都是左方为借方，右方为贷方，但借方、贷方反映会计要素数量变化的增减性质则是不固定的。不同性质的账户，借贷方所登记的内容不同，下面分别说明各类账户的结构。\n有借必有贷，借贷必相等\n  资产类账户的结构 在资产类账户中，它的借方记录资产的增加额，贷方记录资产的减少额。在同一会计期间（年、月），借方记录的合计数额称作本期借方发生额，贷方记录的合计数称作本期贷方发生额，在每一会计期间的期末将借贷方发生额相比较，其差额称作期末余额。资产类账户的期末余额一般在借方。\n资产类账户的期末余额可根据下列公式计算： 期末余额（借方）= 期初余额 + 本期借方发生额 - 本期贷方发生额\n  负债类账户和所有者权益类账户的结构 负债及所有者权益类账户的结构与资产类账户正好相反，其贷方记录负债及所有者权益的增加额；借方记录负债及所有者权益的减少额，期末余额一般应在贷方。\n负债类账户和所有者权益类账户的期末余额可根据下列公式计算： 期末余额（贷方）= 期初余额 + 本期贷方发生额 - 本期借方发生额\n  成本费用类账户的结构 成本类账户的结构与资产类账户的结构基本相同，账户的借方记录费用成本的增加额，账户的贷方记录费用成本转入抵销收益类账户（减少）的数额，由于借方记录的费用成本的增加额一般都要通过贷方转出，所以账户通常没有余额。如果有余额，也表现为借方余额。\n  收益类账户的结构 收益类账户的结构则与负债类账户和所有者权益类账户的结构基本相同，收入的增加额记入账户的贷方，收入转出（减少额）则应记入账户的借方，由于贷方记录的收入增加额一般要通过借方转出，所以账户通常也没有期末余额。如果有余额，同样也表现为贷方余额。\n  ","title":"财会常用知识点"},{"content":"Average True Range 取一定时间周期内的股价波动幅度的移动平均值，通常使用14天。\n由于惊恐抛售所驱使的价格的剧烈下跌，这一指标在市场底部通常可以达到一个较高的价值。这一指标对于长期持续边幅移动的时段是非常典型的，这一情况通常发生在市场的顶部，或者是在价格巩固期间。平均波幅通道技术指标依据同样的原则，可以被解释成为其他一些易变指数。根据这个指标来进行预测的原则可以表达为：该指标价值越高，趋势改变的可能性就越高；该指标的价值越低，趋势的移动性就越弱。\n t：当日tody； p：上一个节点previous n：时间单元unit； Ci：第i日的收盘价close； Hi：第i日的最高价height； Li：第i日的最低价low。\n $$ TR = Max[(H-L),Abs(H-C_p),Abs(L-C_p)] $$\n Max 取最大值 Abs 取绝对值absolute\n $$ ATR = \\Big( \\frac{1}{n}\\Big) \\sum^{(n)}_{(i=1)} TR_i $$\n波动性较高的股票具有较高的ATR，而波动性较低的股票具有较低的ATR。 它的创建是为了使交易者可以通过简单的计算来更准确地衡量资产的每日波动性。该指标未指示价格方向；相反，它主要用于衡量由缺口引起的波动并限制上下波动 ATR的使用通常用作退出方法，无论如何做出进入决定\n可以使用ATR方法来确定头寸规模，从而说明单个交易者自己接受风险的意愿以及基础市场的波动性\nATR使用范围 1、利用ATR资金配比 通过ATR指标的具体数值我们可以看到一些基本的信息,从中分别具体货币的波动情况,这样就可以调整资金的配比.并且每种产品的价格都在不断的波动中,所以可以根据具体的ATR指标的参数来调整交易的计划\n2、利用ATR选择入场点位 短期ATR一般大于长期的ATR,我们可以通过短期和长期的波动性的差值,并根据相应的价格方向入场,同时在趋势比较稳定的时候平仓出局.\n3、利用ATR止损 著名的海龟法则中,海龟交易法则按照价格高于初始价格0.5ATR进行加仓操作,按照价格低于建仓价2ATR进行止损操作.\n","permalink":"https://aixin.me/post/average-true-range/","summary":"Average True Range 取一定时间周期内的股价波动幅度的移动平均值，通常使用14天。\n由于惊恐抛售所驱使的价格的剧烈下跌，这一指标在市场底部通常可以达到一个较高的价值。这一指标对于长期持续边幅移动的时段是非常典型的，这一情况通常发生在市场的顶部，或者是在价格巩固期间。平均波幅通道技术指标依据同样的原则，可以被解释成为其他一些易变指数。根据这个指标来进行预测的原则可以表达为：该指标价值越高，趋势改变的可能性就越高；该指标的价值越低，趋势的移动性就越弱。\n t：当日tody； p：上一个节点previous n：时间单元unit； Ci：第i日的收盘价close； Hi：第i日的最高价height； Li：第i日的最低价low。\n $$ TR = Max[(H-L),Abs(H-C_p),Abs(L-C_p)] $$\n Max 取最大值 Abs 取绝对值absolute\n $$ ATR = \\Big( \\frac{1}{n}\\Big) \\sum^{(n)}_{(i=1)} TR_i $$\n波动性较高的股票具有较高的ATR，而波动性较低的股票具有较低的ATR。 它的创建是为了使交易者可以通过简单的计算来更准确地衡量资产的每日波动性。该指标未指示价格方向；相反，它主要用于衡量由缺口引起的波动并限制上下波动 ATR的使用通常用作退出方法，无论如何做出进入决定\n可以使用ATR方法来确定头寸规模，从而说明单个交易者自己接受风险的意愿以及基础市场的波动性\nATR使用范围 1、利用ATR资金配比 通过ATR指标的具体数值我们可以看到一些基本的信息,从中分别具体货币的波动情况,这样就可以调整资金的配比.并且每种产品的价格都在不断的波动中,所以可以根据具体的ATR指标的参数来调整交易的计划\n2、利用ATR选择入场点位 短期ATR一般大于长期的ATR,我们可以通过短期和长期的波动性的差值,并根据相应的价格方向入场,同时在趋势比较稳定的时候平仓出局.\n3、利用ATR止损 著名的海龟法则中,海龟交易法则按照价格高于初始价格0.5ATR进行加仓操作,按照价格低于建仓价2ATR进行止损操作.","title":"ATR：均幅指标"},{"content":"一、BackTrader介绍 BackTrader是开源免费的量化交易策略回测系统， 运行流程：\n 引入backtrader 加载和注入数据Feed（cerebro.adddata） 执行：cerebro.run() 可视化结果：cerebro.plot()  二、安装BackTrader 1、安装环境要求：  Python 2.7 Python 3.2 / 3.3/ 3.4 / 3.5 pypy/pypy3 Matplotlib\u0026gt; = 1.4.1（如果需要绘图的话需要配置）  2、兼容Python2.x/3.x from __future__ import (absolute_import, division, print_function,unicode_literals) 3.1、通过pip安装: pip install backtrader\n如果想同时安装matplotlib： pip install backtrader[plotting]\n3.2、通过源安装 https://github.com/mementum/backtrader python安装源文件，自己搜索\n3.3、通过pycharm安装 新建项目 -\u0026gt; Files -\u0026gt; Settings -\u0026gt; Project 项目名称 -\u0026gt; Project Interpreter -\u0026gt; 右侧加号，搜索backtrader Install Package即可\n三、backtrader用法 1、使用前说明 常用数据名称： 开盘价，最高价，最低价，收盘价，成交量，持仓量\n数据索引方式： 当前值：[0] 前一个值：[-1] 前2个值：[-2] ……\n 说明：所有的数字都是历史值，所以只能往后推\n 1、基本功能 from __future__ import (absolute_import, division, print_function,unicode_literals) #让python2兼容python3，python3环境下可以不用写 #引入backtrader import backtrader as bt if __name__ == \u0026#39;__main__\u0026#39;: cerebro = bt.Cerebro() cerebro.broker.setcash(100.0) #可以自定义金额 print(\u0026#39;Starting Portfolio Value: %.2f\u0026#39; % cerebro.broker.getvalue()) cerebro.run() print(\u0026#39;Final Portfolio Value: %.2f\u0026#39; % cerebro.broker.getvalue()) 执行结果：\n Starting Portfolio Value: 100.00\nFinal Portfolio Value: 100.00\n 2、添加数据  说明： os.path.dirname 当前文件的绝对路劲目录（不包含文件名） __file__ 当前文件绝对路劲+文件名 os.path.abspath(path) 输出绝对路劲、当前目录、上级目录等（反斜杠） sys.argv[0] 当前文件绝对路劲+文件名（本地目录，正斜杠，用的时候需要转化成反斜杠）\nprint(sys.argv[0]) #输出：D:/python/futures/macd.py\rprint(os.path.abspath(sys.argv[0])) #输出：D:\\python\\futures\\macd.py\rprint(os.path.dirname(os.path.abspath(sys.argv[0]))) #输出：D:\\python\\futures\r 代码：\nimport datetime # For datetime objects import os.path # To manage paths import sys # To find out the script name (in argv[0]) # Import the backtrader platform import backtrader as bt if __name__ == \u0026#39;__main__\u0026#39;: # Create a cerebro entity cerebro = bt.Cerebro() # Datas are in a subfolder of the samples. Need to find where the script is # because it could have been called from anywhere modpath = os.path.dirname(os.path.abspath(sys.argv[0])) datapath = os.path.join(modpath, \u0026#39;../../datas/orcl-1995-2014.txt\u0026#39;) # Create a Data Feed data = bt.feeds.YahooFinanceCSVData( dataname=datapath, # Do not pass values before this date fromdate=datetime.datetime(2000, 1, 1), # Do not pass values after this date todate=datetime.datetime(2000, 12, 31), reverse=False) # Add the Data Feed to Cerebro cerebro.adddata(data) # Set our desired cash start cerebro.broker.setcash(100000.0) # Print out the starting conditions print(\u0026#39;Starting Portfolio Value: %.2f\u0026#39; % cerebro.broker.getvalue()) # Run over everything cerebro.run() # Print out the final result print(\u0026#39;Final Portfolio Value: %.2f\u0026#39; % cerebro.broker.getvalue()) 运行结果：\n Starting Portfolio Value: 1000000.00\nFinal Portfolio Value: 1000000.00\n ","permalink":"https://aixin.me/post/backtrader/","summary":"一、BackTrader介绍 BackTrader是开源免费的量化交易策略回测系统， 运行流程：\n 引入backtrader 加载和注入数据Feed（cerebro.adddata） 执行：cerebro.run() 可视化结果：cerebro.plot()  二、安装BackTrader 1、安装环境要求：  Python 2.7 Python 3.2 / 3.3/ 3.4 / 3.5 pypy/pypy3 Matplotlib\u0026gt; = 1.4.1（如果需要绘图的话需要配置）  2、兼容Python2.x/3.x from __future__ import (absolute_import, division, print_function,unicode_literals) 3.1、通过pip安装: pip install backtrader\n如果想同时安装matplotlib： pip install backtrader[plotting]\n3.2、通过源安装 https://github.com/mementum/backtrader python安装源文件，自己搜索\n3.3、通过pycharm安装 新建项目 -\u0026gt; Files -\u0026gt; Settings -\u0026gt; Project 项目名称 -\u0026gt; Project Interpreter -\u0026gt; 右侧加号，搜索backtrader Install Package即可\n三、backtrader用法 1、使用前说明 常用数据名称： 开盘价，最高价，最低价，收盘价，成交量，持仓量\n数据索引方式： 当前值：[0] 前一个值：[-1] 前2个值：[-2] ……\n 说明：所有的数字都是历史值，所以只能往后推","title":"BackTrader学习笔记"},{"content":"MA(Moving Average):移动平均线 可以过滤随机价格波动中的噪音来帮助平滑价格走势，基于过去的价格，因此时趋势跟踪。包括简单移动平均线(SMA)和指数移动平均线(EMA)，常见应用为确定趋势方向并确定支撑位和阻力位\n  简单移动平均线(SMA)： $SMA = \\frac{A_1 + A_2 + \\cdots + A_n}{n}$ A:n期的平均值 n：周期数\n  指数移动平均线(EMA): $EMA_t = [V_t \\times \\big(\\frac{s}{1+d}\\big)] + EMA_y \\times [1 - \\big(\\frac{s}{1+d}\\big)]$\n  $EMA_t$:当天或当期的EMA $V_t$:当天或当期的价格值 $EMA_y$:昨天或上期的EMA s:平滑度 d:天数或期数\n要计算EMA，线要计算SMA，然后再计算平滑度s 平滑度的计算公式：$s = \\frac{2}{选定天数+1}$\nEMA:指数移动平均（考虑了当天收盘价），快EMA（短时期，通常用12周期），慢EMA（长时期，通常用26周期）\n","permalink":"https://aixin.me/post/moving-average/","summary":"MA(Moving Average):移动平均线 可以过滤随机价格波动中的噪音来帮助平滑价格走势，基于过去的价格，因此时趋势跟踪。包括简单移动平均线(SMA)和指数移动平均线(EMA)，常见应用为确定趋势方向并确定支撑位和阻力位\n  简单移动平均线(SMA)： $SMA = \\frac{A_1 + A_2 + \\cdots + A_n}{n}$ A:n期的平均值 n：周期数\n  指数移动平均线(EMA): $EMA_t = [V_t \\times \\big(\\frac{s}{1+d}\\big)] + EMA_y \\times [1 - \\big(\\frac{s}{1+d}\\big)]$\n  $EMA_t$:当天或当期的EMA $V_t$:当天或当期的价格值 $EMA_y$:昨天或上期的EMA s:平滑度 d:天数或期数\n要计算EMA，线要计算SMA，然后再计算平滑度s 平滑度的计算公式：$s = \\frac{2}{选定天数+1}$\nEMA:指数移动平均（考虑了当天收盘价），快EMA（短时期，通常用12周期），慢EMA（长时期，通常用26周期）","title":"MA/SMA/EMA"},{"content":"算数平均数 一组数据的所有数据之和除以数据个数，反映数据集中的趋势 $$ A_n = \\frac{a_1+a_2+a_3+\\cdots+a_n}{n} $$\n几何平均数 n数连续乘积，然后开n次方根 $$ G_n = \\sqrt[n]{a_1 \\times a_2 \\times a_3 \\times \\cdots \\times a_n} $$\n调和平均数（数学，非统计） 每一个数值取倒数，然后将所有倒数求平均，然后将得到的平均数取到数 $$ H_n = \\frac{n}{\\frac{1}{a_1} + \\frac{1}{a_2} \\frac{1}{a_3} + \\cdots + \\frac{1}{a_n}} $$\n加权平均数 如果是一个含有重复数据的数组n，所有数的合除以所有数重复出现的总次数， 数字$x_n$出现的次数是$f_n$ $$ n = f_1 + f_2 + f_3 + \\cdots + f_n $$ $$ \\overline{X} = \\frac{x_1 \\times f_1 + x_2 \\times f_2 + x_3 \\times f_3 + \\cdots + x_n \\times f_n}{n} $$\n平方平均数 n个数据先单个平方，再整体平均，最后再开平方 $$ M_n = \\sqrt{\\frac{a^2_1+a^2_2+a^2_3+ \\cdots +a^2_n}{n}} $$\n指数平均数(EXPMA,简称EMA) 对序列 ${x_n}$ 定义其截至第 n 项的周期为N 的指数移动平均 $EMA_N(x_n)$ 为 $$ EMA_N(x_n) = \\frac{2}{N + 1} \\sum^{\\infty}_{k=0} \\bigg(\\frac{N - 1}{N + 1}\\bigg)^k x_n-k $$\n中位数 $X_1,X_2,X_3,\\cdots,X_n$ 是总体样本，然后按照从小到大排序： $X_{(1)},X_{(2)},X_{(3)}\\cdots,X_{(n)}$\nn为奇数时：$m_{0.5} = X_{\\frac{n+1}{2}}$\nn为偶数时：$m_{0.5}= \\frac{X_{(n/2)}+X_{(n/2+1)}}{2}$\n","permalink":"https://aixin.me/post/average/","summary":"算数平均数 一组数据的所有数据之和除以数据个数，反映数据集中的趋势 $$ A_n = \\frac{a_1+a_2+a_3+\\cdots+a_n}{n} $$\n几何平均数 n数连续乘积，然后开n次方根 $$ G_n = \\sqrt[n]{a_1 \\times a_2 \\times a_3 \\times \\cdots \\times a_n} $$\n调和平均数（数学，非统计） 每一个数值取倒数，然后将所有倒数求平均，然后将得到的平均数取到数 $$ H_n = \\frac{n}{\\frac{1}{a_1} + \\frac{1}{a_2} \\frac{1}{a_3} + \\cdots + \\frac{1}{a_n}} $$\n加权平均数 如果是一个含有重复数据的数组n，所有数的合除以所有数重复出现的总次数， 数字$x_n$出现的次数是$f_n$ $$ n = f_1 + f_2 + f_3 + \\cdots + f_n $$ $$ \\overline{X} = \\frac{x_1 \\times f_1 + x_2 \\times f_2 + x_3 \\times f_3 + \\cdots + x_n \\times f_n}{n} $$","title":"常用平均数"},{"content":"MACD原理介绍 MACD(Moving Average Convergence Divergence),是根据均线的构造原理，对股票价格的收盘价进行平滑处理，求出算术平均值以后再进行计算，是一种趋向类指标。\nMACD指标是运用快速（短期）和慢速（长期）移动平均线及其聚合与分离的征兆，加以双重平滑运算。而根据移动平均线原理发展出来的MACD，一则去除了移动平均线频繁发出假信号的缺陷，二则保留了移动平均线的效果，因此，MACD指标具有均线趋势性、稳重性、安定性等特点，是用来研判买卖股票的时机，预测股票价格涨跌的技术分析指标 。\nMACD指标主要是通过EMA、DIF和DEA（或叫MACD、DEM）这三值之间关系的研判，DIF和DEA连接起来的移动平均线的研判以及DIF减去DEM值而绘制成的柱状图（BAR）的研判等来分析判断行情，预测股价中短期趋势的主要的股市技术分析指标。其中，DIF是核心，DEA是辅助。DIF是快速平滑移动平均线（EMA1）和慢速平滑移动平均线（EMA2）的差。BAR柱状图在股市技术软件上是用红柱和绿柱的收缩来研判行情。 价格数据：收盘价close EMA：指数移动平均线 DIF（差离值） = EMA12日线 - EMA26日线 EMA9：是“信号线”，又称DEA DIF线与EMA9日线比较，DIF穿越到EMA9上方是买入或做多信号，DIF穿越到EMA9的下方为卖出或做空信号， DIF值越大，上涨趋势越大，DIF值越小，下跌趋势越大\n柱状图：(DIF-DEA)*2\n解释方法：交叉、散度、快速上升/下降\nRSI相对强度指标（振荡器），范围是0到100，超过70时，是为超买或高估，可能引发趋势翻转或价格回调，小于30时，视为超卖或低估。\nMACD计算方式 DMA:平行线差指标\n","permalink":"https://aixin.me/post/macd/","summary":"MACD原理介绍 MACD(Moving Average Convergence Divergence),是根据均线的构造原理，对股票价格的收盘价进行平滑处理，求出算术平均值以后再进行计算，是一种趋向类指标。\nMACD指标是运用快速（短期）和慢速（长期）移动平均线及其聚合与分离的征兆，加以双重平滑运算。而根据移动平均线原理发展出来的MACD，一则去除了移动平均线频繁发出假信号的缺陷，二则保留了移动平均线的效果，因此，MACD指标具有均线趋势性、稳重性、安定性等特点，是用来研判买卖股票的时机，预测股票价格涨跌的技术分析指标 。\nMACD指标主要是通过EMA、DIF和DEA（或叫MACD、DEM）这三值之间关系的研判，DIF和DEA连接起来的移动平均线的研判以及DIF减去DEM值而绘制成的柱状图（BAR）的研判等来分析判断行情，预测股价中短期趋势的主要的股市技术分析指标。其中，DIF是核心，DEA是辅助。DIF是快速平滑移动平均线（EMA1）和慢速平滑移动平均线（EMA2）的差。BAR柱状图在股市技术软件上是用红柱和绿柱的收缩来研判行情。 价格数据：收盘价close EMA：指数移动平均线 DIF（差离值） = EMA12日线 - EMA26日线 EMA9：是“信号线”，又称DEA DIF线与EMA9日线比较，DIF穿越到EMA9上方是买入或做多信号，DIF穿越到EMA9的下方为卖出或做空信号， DIF值越大，上涨趋势越大，DIF值越小，下跌趋势越大\n柱状图：(DIF-DEA)*2\n解释方法：交叉、散度、快速上升/下降\nRSI相对强度指标（振荡器），范围是0到100，超过70时，是为超买或高估，可能引发趋势翻转或价格回调，小于30时，视为超卖或低估。\nMACD计算方式 DMA:平行线差指标","title":"MACD 平滑异同移动平均指标"},{"content":"一、凯利公式 英文：The Kelly Criterion\n 在概率论中，凯利公式（也称 “凯利方程式”）是一个在期望净收益为正的独立重复赌局中，使本金的长期增长率最大化的投注策略。该公式于 1956 年由约翰·拉里·凯利（John Larry Kelly）在《贝尔系统技术期刊》中发表，可以用来计算每次游戏中应投注的资金比例。若赌局的期望净收益为零或为负，凯利公式给出的结论是不赌为赢。\n 公式： $$ f^* = \\frac {bp-q}{b} = \\frac {p(b+1)-1}{b} $$\n $f^*$ = 应投注的资本比值 p = 获胜的概率 q = 失败的概率 b = 赔率\n 例子：有一个简单2赔1的赌局，扔硬币下注，硬币为正面则得2元，如果为反面则输掉1元，你的总资产为100元，每一次的押注都可投入任意金额。你会怎么赌呢？\n硬币抛出正反面的概率都是50%，所以p、q获胜失败的概率都为0.5，而赔率＝期望盈利÷可能亏损=2元盈利÷1元亏损，赔率就是2，我们要求的答案是f，也就是(bp - q) ÷ b = (2 * 50% - 50%) ÷ 2 = 25%。拿出资金的25%来进行下注，才能使赌局收益最大化。\n真正应该关心的是长期累积的收入，对于累积的收益来说，最后的结果只和输赢的局数有关，而和输赢的顺序无关。所以凯利公式推出了一个最佳的投入仓位比，来最大化长期的累积收益： $$ bet = edge / odds $$\n 最佳仓位bet = 预期获益 / 获益回报 edge：赢面 odds：赔率\n $$ edge = bp - q $$\n 赢面 = 获胜的概率*赔率 - 失败的概率\n 小明现在有100元的起始资金，他现在将要投硬币4次，每一次他投出硬币为正面的时候，将获得6倍资金回报(1陪5)，当他投出硬币为反面，陪光。请问小明要如何分配每次下注资金，才能最大化他4次投币之后的收益呢？\n edge = 0.5 * 5 - 0.5 = 2 odds = 5 最佳仓位bet = 2/5 = 40%\n 根据凯利公式计算，我们可以建立起这样一个正反面的概率各为50%，edge = 0.5*5-0.5 = 2, odds为5，最佳仓位为40%，可以看到最终在16个可能出现的结果中(4次投掷)，12.96和8100出现1次，64.8和1620出现4次，324出现6次，16次结果的收益为324。凯利公式的目的正是最大化这些结果的收益。 参考：https://www.gfedu.cn/aqf/content_23580.shtml\n二、CTA策略 商品交易顾问(CommodityTrading Advisor) CTA是一种获取绝对收益的资产管理方式或投资策略。初始定义来自美国商品期货交易委员会(CFTC)制定的商品交易法案，是指通过为客户提供期货期权方面的交易建议或者直接通过受管理的期货账户参与实际交易来获得收益的机构或个人。传统意义上的CTA 基金的投资品种仅限于商品期货，但随着近年来全球期货市场的发展，CTA 基金逐渐将其投资领域扩展到包括利率期货、股指期货、外汇期货在内的几乎所有期货品种。CTA与其他资产或者策略种类的相关性较低，所以一直在资产配置或交易策略中占据重要的一席之地。\nCTA分类\n  日间低频趋势策略\n 均线突破策略 布林通道策略 海龟交易法则 Aberration策略    日内高频趋势策略\n R-breaker Dual-thrust ART定破 形态识别，机器学习等    套利策略\n 期现套利 跨期套利 跨品种套利 跨市场套利  参考：https://www.gfedu.cn/aqf/content_23580.shtml\n  ","permalink":"https://aixin.me/post/quantitative-trading-learning/","summary":"一、凯利公式 英文：The Kelly Criterion\n 在概率论中，凯利公式（也称 “凯利方程式”）是一个在期望净收益为正的独立重复赌局中，使本金的长期增长率最大化的投注策略。该公式于 1956 年由约翰·拉里·凯利（John Larry Kelly）在《贝尔系统技术期刊》中发表，可以用来计算每次游戏中应投注的资金比例。若赌局的期望净收益为零或为负，凯利公式给出的结论是不赌为赢。\n 公式： $$ f^* = \\frac {bp-q}{b} = \\frac {p(b+1)-1}{b} $$\n $f^*$ = 应投注的资本比值 p = 获胜的概率 q = 失败的概率 b = 赔率\n 例子：有一个简单2赔1的赌局，扔硬币下注，硬币为正面则得2元，如果为反面则输掉1元，你的总资产为100元，每一次的押注都可投入任意金额。你会怎么赌呢？\n硬币抛出正反面的概率都是50%，所以p、q获胜失败的概率都为0.5，而赔率＝期望盈利÷可能亏损=2元盈利÷1元亏损，赔率就是2，我们要求的答案是f，也就是(bp - q) ÷ b = (2 * 50% - 50%) ÷ 2 = 25%。拿出资金的25%来进行下注，才能使赌局收益最大化。\n真正应该关心的是长期累积的收入，对于累积的收益来说，最后的结果只和输赢的局数有关，而和输赢的顺序无关。所以凯利公式推出了一个最佳的投入仓位比，来最大化长期的累积收益： $$ bet = edge / odds $$\n 最佳仓位bet = 预期获益 / 获益回报 edge：赢面 odds：赔率\n $$ edge = bp - q $$","title":"量化交易相关名词解释"},{"content":"官方教程 https://docs.spring.io/spring-boot/docs/2.2.1.RELEASE/reference/html/\n1、Spring Boot介绍 Spring Boot可以轻松创建可以运行的独立的，生产级的基于Spring的应用程序。我们对Spring平台和第三方库采取自己的看法，以便您尽可能轻松地使用本教程。大多数Spring Boot应用程序只需要很少的Spring配置。\n您可以使用Spring Boot来创建可以使用java -jar或更传统的war部署来启动的Java应用程序 。我们还提供了一个运行“spring script”的命令行工具。\n2、系统要求 Spring Boot 2.2.1需要Java 8 及以上版本，同时也兼容了Java 13\n支持以下构建程序：\n Maven 版本3.3+ Gradle 5.x  Servlet容器：\n   Name Servlet版本     Tomcat 9.0 4.0   Jetty 9.4 3.1   Undertow 2.0 4.0    3、Spring Boot安装  服务器SDK最低要求为：Java SDK v1.8 查看环境Java版本：java -version\n   安装方法一 您可以像使用任何标准Java库一样使用Spring Boot。为此，请spring-boot-*.jar在类路径中包含相应的文件。Spring Boot不需要任何特殊的工具集成，因此您可以使用任何IDE或文本编辑器。此外，Spring Boot应用程序没有什么特别之处，因此您可以像运行其他任何Java程序一样运行和调试Spring Boot应用程序。\n虽然您可以复制Spring Boot jar，但我们通常建议您使用支持依赖管理的构建工具（如Maven或Gradle）。\n  安装方法二、使用Maven安装（推荐） Maven版本最低要求3.3+，前提是先要安装Maven（https://maven.apache.org/）。 或者通过IDE安装Maven插件 Spring Boot依赖关系使用org.springframework.bootgroupId。通常，您的Maven POM文件从spring-boot-starter-parent项目中继承并向一个或多个“Starter”声明依赖关系。Spring Boot还提供了一个可选的 Maven插件来创建可执行的jar。 以下清单显示了一个典型的pom.xml文件：\n  \u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt;\r\u0026lt;project xmlns=\u0026quot;http://maven.apache.org/POM/4.0.0\u0026quot; xmlns:xsi=\u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot;\rxsi:schemaLocation=\u0026quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\u0026quot;\u0026gt;\r\u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt;\r\u0026lt;groupId\u0026gt;com.example\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;myproject\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt;\r\u0026lt;!-- Inherit defaults from Spring Boot --\u0026gt;\r\u0026lt;parent\u0026gt;\r\u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;2.2.1.RELEASE\u0026lt;/version\u0026gt;\r\u0026lt;/parent\u0026gt;\r\u0026lt;!-- Override inherited settings --\u0026gt;\r\u0026lt;description/\u0026gt;\r\u0026lt;developers\u0026gt;\r\u0026lt;developer/\u0026gt;\r\u0026lt;/developers\u0026gt;\r\u0026lt;licenses\u0026gt;\r\u0026lt;license/\u0026gt;\r\u0026lt;/licenses\u0026gt;\r\u0026lt;scm\u0026gt;\r\u0026lt;url/\u0026gt;\r\u0026lt;/scm\u0026gt;\r\u0026lt;url/\u0026gt;\r\u0026lt;!-- 添加依赖关系--\u0026gt;\r\u0026lt;dependencies\u0026gt;\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt;\r\u0026lt;/dependency\u0026gt;\r\u0026lt;/dependencies\u0026gt;\r\u0026lt;!-- 引入将应用打包成可执行的jar包的插件 --\u0026gt;\r\u0026lt;build\u0026gt;\r\u0026lt;plugins\u0026gt;\r\u0026lt;plugin\u0026gt;\r\u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt;\r\u0026lt;/plugin\u0026gt;\r\u0026lt;/plugins\u0026gt;\r\u0026lt;/build\u0026gt;\r\u0026lt;/project\u0026gt;\r spring-boot-starter-parent方法虽然很好，但不是适合所有场景。\n 4、开发第一个Spring Boot应用 ","permalink":"https://aixin.me/post/spring-boot-getting-started/","summary":"官方教程 https://docs.spring.io/spring-boot/docs/2.2.1.RELEASE/reference/html/\n1、Spring Boot介绍 Spring Boot可以轻松创建可以运行的独立的，生产级的基于Spring的应用程序。我们对Spring平台和第三方库采取自己的看法，以便您尽可能轻松地使用本教程。大多数Spring Boot应用程序只需要很少的Spring配置。\n您可以使用Spring Boot来创建可以使用java -jar或更传统的war部署来启动的Java应用程序 。我们还提供了一个运行“spring script”的命令行工具。\n2、系统要求 Spring Boot 2.2.1需要Java 8 及以上版本，同时也兼容了Java 13\n支持以下构建程序：\n Maven 版本3.3+ Gradle 5.x  Servlet容器：\n   Name Servlet版本     Tomcat 9.0 4.0   Jetty 9.4 3.1   Undertow 2.0 4.0    3、Spring Boot安装  服务器SDK最低要求为：Java SDK v1.8 查看环境Java版本：java -version\n   安装方法一 您可以像使用任何标准Java库一样使用Spring Boot。为此，请spring-boot-*.jar在类路径中包含相应的文件。Spring Boot不需要任何特殊的工具集成，因此您可以使用任何IDE或文本编辑器。此外，Spring Boot应用程序没有什么特别之处，因此您可以像运行其他任何Java程序一样运行和调试Spring Boot应用程序。\n虽然您可以复制Spring Boot jar，但我们通常建议您使用支持依赖管理的构建工具（如Maven或Gradle）。","title":"Spring Boot 入门指南"},{"content":"生成数组\n numpy.arange([start, ]stop, [step, ]dtype=None)\n 示例\nnp.arange(3)\rarray([0, 1, 2])\rnp.arange(3.0)\rarray([ 0., 1., 2.])\rnp.arange(3,7)\rarray([3, 4, 5, 6])\rnp.arange(3,7,2)\rarray([3, 5])\r生成随机整数\n numpy.random.randint(low, high=None, size=None, dtype=\u0026lsquo;l\u0026rsquo;)\n 示例\nnp.random.randint(2, size=10)\rarray([1, 0, 0, 0, 1, 1, 0, 0, 1, 0])\rnp.random.randint(1, size=10)\rarray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\r随机排列\n np.random.shuffle(x)\n 示例\narr = np.arange(10)\rnp.random.shuffle(arr)\rarr\r[1 7 5 2 9 4 3 6 0 8]\r随机采样\n numpy.random.choice(a, size=None, replace=True, p=None)\n 示例\nnp.random.choice(5, 3)\rarray([0, 3, 4])\r#This is equivalent to np.random.randint(0,5,3)\r","permalink":"https://aixin.me/post/numpy/","summary":"生成数组\n numpy.arange([start, ]stop, [step, ]dtype=None)\n 示例\nnp.arange(3)\rarray([0, 1, 2])\rnp.arange(3.0)\rarray([ 0., 1., 2.])\rnp.arange(3,7)\rarray([3, 4, 5, 6])\rnp.arange(3,7,2)\rarray([3, 5])\r生成随机整数\n numpy.random.randint(low, high=None, size=None, dtype=\u0026lsquo;l\u0026rsquo;)\n 示例\nnp.random.randint(2, size=10)\rarray([1, 0, 0, 0, 1, 1, 0, 0, 1, 0])\rnp.random.randint(1, size=10)\rarray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\r随机排列\n np.random.shuffle(x)\n 示例\narr = np.arange(10)\rnp.random.shuffle(arr)\rarr\r[1 7 5 2 9 4 3 6 0 8]\r随机采样","title":"Numpy学习笔记"}]